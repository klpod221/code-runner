services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: code_runner_api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-code_runner}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_change_in_production}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-15}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - MAX_EXECUTION_TIME=10000
      - MAX_MEMORY=512
      - CODE_EXECUTION_TEMP_DIR=/tmp/code-execution
    volumes:
      - ./:/app
      - /app/node_modules
      - code_execution_tmp:/tmp/code-execution
    depends_on:
      db:
        condition: service_healthy
    command: >
      bash -c "mkdir -p /tmp/code-execution && chmod 755 /tmp/code-execution && npm run dev"
    restart: always

  db:
    image: postgres:14
    container_name: code_runner_db
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-code_runner}
    volumes:
      - ./docker/postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  code_execution_tmp:
    driver: local
